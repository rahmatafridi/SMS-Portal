//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMSPortal
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SMSPortalEntity : DbContext
    {
        public SMSPortalEntity()
            : base("name=SMSPortalEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserTypeLookup> UserTypeLookups { get; set; }
        public virtual DbSet<ClientPackageDetail> ClientPackageDetails { get; set; }
        public virtual DbSet<PageAllocation> PageAllocations { get; set; }
        public virtual DbSet<SMSCampain> SMSCampains { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<AssignPackage> AssignPackages { get; set; }
    
        public virtual int InsertClient(string name, string masking, Nullable<int> statusId, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var maskingParameter = masking != null ?
                new ObjectParameter("Masking", masking) :
                new ObjectParameter("Masking", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClient", nameParameter, maskingParameter, statusIdParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter);
        }
    
        public virtual int UpdateClient(string name, string masking, Nullable<int> statusId, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<System.Guid> uID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var maskingParameter = masking != null ?
                new ObjectParameter("Masking", masking) :
                new ObjectParameter("Masking", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClient", nameParameter, maskingParameter, statusIdParameter, updatedOnParameter, updatedByParameter, uIDParameter);
        }
    
        public virtual int InsertPackage(string packageName, Nullable<int> sMSnum, Nullable<int> duration, Nullable<double> rate, Nullable<int> statusId, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var sMSnumParameter = sMSnum.HasValue ?
                new ObjectParameter("SMSnum", sMSnum) :
                new ObjectParameter("SMSnum", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPackage", packageNameParameter, sMSnumParameter, durationParameter, rateParameter, statusIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int UpdatePackage(string packageName, Nullable<int> sMSnum, Nullable<int> duration, Nullable<double> rate, Nullable<System.Guid> uID, Nullable<int> statusId, Nullable<int> updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var sMSnumParameter = sMSnum.HasValue ?
                new ObjectParameter("SMSnum", sMSnum) :
                new ObjectParameter("SMSnum", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(System.Guid));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePackage", packageNameParameter, sMSnumParameter, durationParameter, rateParameter, uIDParameter, statusIdParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int InsertUser(string userId, string password, Nullable<int> userTypeId, Nullable<int> clientId, Nullable<int> statusId, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", userIdParameter, passwordParameter, userTypeIdParameter, clientIdParameter, statusIdParameter, createdByParameter, createdOnParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int UpdateUser(string userId, string password, Nullable<int> userTypeId, Nullable<int> clientId, Nullable<int> statusId, Nullable<System.Guid> uID, Nullable<int> updatedBy, Nullable<System.DateTime> updatedOn)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(System.Guid));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", userIdParameter, passwordParameter, userTypeIdParameter, clientIdParameter, statusIdParameter, uIDParameter, updatedByParameter, updatedOnParameter);
        }
    
        public virtual int UpdateAssignPackage(Nullable<int> clientId, Nullable<int> statusId, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAssignPackage", clientIdParameter, statusIdParameter, updatedOnParameter, updatedByParameter);
        }
    
        public virtual int InsertClientPackageDetail(Nullable<int> clientId, Nullable<int> packageId, Nullable<int> debitSMSQty, Nullable<int> creditSMSQty, Nullable<int> statusId, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> totalScheduledSMS, Nullable<int> totalSentSMS, Nullable<int> totalFailureSMS)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var debitSMSQtyParameter = debitSMSQty.HasValue ?
                new ObjectParameter("DebitSMSQty", debitSMSQty) :
                new ObjectParameter("DebitSMSQty", typeof(int));
    
            var creditSMSQtyParameter = creditSMSQty.HasValue ?
                new ObjectParameter("CreditSMSQty", creditSMSQty) :
                new ObjectParameter("CreditSMSQty", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var totalScheduledSMSParameter = totalScheduledSMS.HasValue ?
                new ObjectParameter("TotalScheduledSMS", totalScheduledSMS) :
                new ObjectParameter("TotalScheduledSMS", typeof(int));
    
            var totalSentSMSParameter = totalSentSMS.HasValue ?
                new ObjectParameter("TotalSentSMS", totalSentSMS) :
                new ObjectParameter("TotalSentSMS", typeof(int));
    
            var totalFailureSMSParameter = totalFailureSMS.HasValue ?
                new ObjectParameter("TotalFailureSMS", totalFailureSMS) :
                new ObjectParameter("TotalFailureSMS", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClientPackageDetail", clientIdParameter, packageIdParameter, debitSMSQtyParameter, creditSMSQtyParameter, statusIdParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, totalScheduledSMSParameter, totalSentSMSParameter, totalFailureSMSParameter);
        }
    
        public virtual int UpdateClientPackageDetail(Nullable<int> clientId, Nullable<int> packageId, Nullable<int> debitSMSQty, Nullable<int> creditSMSQty, Nullable<int> statusId, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var debitSMSQtyParameter = debitSMSQty.HasValue ?
                new ObjectParameter("DebitSMSQty", debitSMSQty) :
                new ObjectParameter("DebitSMSQty", typeof(int));
    
            var creditSMSQtyParameter = creditSMSQty.HasValue ?
                new ObjectParameter("CreditSMSQty", creditSMSQty) :
                new ObjectParameter("CreditSMSQty", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClientPackageDetail", clientIdParameter, packageIdParameter, debitSMSQtyParameter, creditSMSQtyParameter, statusIdParameter, updatedOnParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<PageAllocation> GetRightsByFormUserType(Nullable<int> userTypeId)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PageAllocation>("GetRightsByFormUserType", userTypeIdParameter);
        }
    
        public virtual ObjectResult<PageAllocation> GetRightsByFormUserType(Nullable<int> userTypeId, MergeOption mergeOption)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PageAllocation>("GetRightsByFormUserType", mergeOption, userTypeIdParameter);
        }
    
        public virtual int InsertClientPackageDetail1(Nullable<int> clientId, Nullable<int> packageId, Nullable<int> debitSMSQty, Nullable<int> creditSMSQty, Nullable<int> statusId, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> totalScheduledSMS, Nullable<int> totalSentSMS, Nullable<int> totalFailureSMS)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var debitSMSQtyParameter = debitSMSQty.HasValue ?
                new ObjectParameter("DebitSMSQty", debitSMSQty) :
                new ObjectParameter("DebitSMSQty", typeof(int));
    
            var creditSMSQtyParameter = creditSMSQty.HasValue ?
                new ObjectParameter("CreditSMSQty", creditSMSQty) :
                new ObjectParameter("CreditSMSQty", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var totalScheduledSMSParameter = totalScheduledSMS.HasValue ?
                new ObjectParameter("TotalScheduledSMS", totalScheduledSMS) :
                new ObjectParameter("TotalScheduledSMS", typeof(int));
    
            var totalSentSMSParameter = totalSentSMS.HasValue ?
                new ObjectParameter("TotalSentSMS", totalSentSMS) :
                new ObjectParameter("TotalSentSMS", typeof(int));
    
            var totalFailureSMSParameter = totalFailureSMS.HasValue ?
                new ObjectParameter("TotalFailureSMS", totalFailureSMS) :
                new ObjectParameter("TotalFailureSMS", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClientPackageDetail1", clientIdParameter, packageIdParameter, debitSMSQtyParameter, creditSMSQtyParameter, statusIdParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, totalScheduledSMSParameter, totalSentSMSParameter, totalFailureSMSParameter);
        }
    
        public virtual ObjectResult<SP_RemainingSMS_Result> SP_RemainingSMS(Nullable<int> clientId, Nullable<int> packageId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_RemainingSMS_Result>("SP_RemainingSMS", clientIdParameter, packageIdParameter);
        }
    
        public virtual int UpdateClientPackageDetail1(Nullable<int> clientId, Nullable<int> packageId, Nullable<int> debitSMSQty, Nullable<int> creditSMSQty, Nullable<int> statusId, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var debitSMSQtyParameter = debitSMSQty.HasValue ?
                new ObjectParameter("DebitSMSQty", debitSMSQty) :
                new ObjectParameter("DebitSMSQty", typeof(int));
    
            var creditSMSQtyParameter = creditSMSQty.HasValue ?
                new ObjectParameter("CreditSMSQty", creditSMSQty) :
                new ObjectParameter("CreditSMSQty", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClientPackageDetail1", clientIdParameter, packageIdParameter, debitSMSQtyParameter, creditSMSQtyParameter, statusIdParameter, updatedOnParameter, updatedByParameter);
        }
    
        public virtual int UpdateAssignPackage1(Nullable<int> clientId, Nullable<int> statusId, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAssignPackage1", clientIdParameter, statusIdParameter, updatedOnParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<GetClientSummaryStatus_Result> GetClientSummaryStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientSummaryStatus_Result>("GetClientSummaryStatus");
        }
    
        public virtual int InsertSMSCampaignData(Nullable<int> clientId, string sMSText, Nullable<int> charCount, Nullable<int> successCount, Nullable<int> failureCount, Nullable<int> sMSCountBefore, Nullable<int> statusId, Nullable<int> createdBy, Nullable<int> updatedBy)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var sMSTextParameter = sMSText != null ?
                new ObjectParameter("SMSText", sMSText) :
                new ObjectParameter("SMSText", typeof(string));
    
            var charCountParameter = charCount.HasValue ?
                new ObjectParameter("CharCount", charCount) :
                new ObjectParameter("CharCount", typeof(int));
    
            var successCountParameter = successCount.HasValue ?
                new ObjectParameter("SuccessCount", successCount) :
                new ObjectParameter("SuccessCount", typeof(int));
    
            var failureCountParameter = failureCount.HasValue ?
                new ObjectParameter("FailureCount", failureCount) :
                new ObjectParameter("FailureCount", typeof(int));
    
            var sMSCountBeforeParameter = sMSCountBefore.HasValue ?
                new ObjectParameter("SMSCountBefore", sMSCountBefore) :
                new ObjectParameter("SMSCountBefore", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSMSCampaignData", clientIdParameter, sMSTextParameter, charCountParameter, successCountParameter, failureCountParameter, sMSCountBeforeParameter, statusIdParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual int InsertAssignPackages(Nullable<int> clientId, Nullable<int> packageId, Nullable<System.DateTime> startedDate, Nullable<System.DateTime> endDate, Nullable<int> statusId, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, string invoice)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var startedDateParameter = startedDate.HasValue ?
                new ObjectParameter("StartedDate", startedDate) :
                new ObjectParameter("StartedDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAssignPackages", clientIdParameter, packageIdParameter, startedDateParameter, endDateParameter, statusIdParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, invoiceParameter);
        }
    }
}
